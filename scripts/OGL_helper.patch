diff --git b/contrib/OGL_helper.h a/contrib/OGL_helper.h
index 5e15a72..cd0f233 100644
--- b/contrib/OGL_helper.h
+++ a/contrib/OGL_helper.h
@@ -245,12 +245,27 @@ namespace OGL {
     glVertex3fv(pc);
   }
 
+  inline void CGAL_GLU_TESS_CALLBACK combineCallback(GLdouble coords[3], GLvoid *[4], GLfloat [4], GLvoid **dataOut)
+  { static std::list<GLfloat*> pcache;
+    if (dataOut) {
+        GLfloat *n = new GLfloat[3];
+        n[0] = coords[0];
+        n[1] = coords[1];
+        n[2] = coords[2];
+        pcache.push_back(n);
+        *dataOut = n;
+    } else {
+        for (std::list<GLfloat*>::const_iterator i = pcache.begin(); i != pcache.end(); i++)
+            delete[] *i;
+        pcache.clear();
+    }
+  }
 
  enum { SNC_AXES};
  enum { SNC_BOUNDARY, SNC_SKELETON };
 
  class Polyhedron : public OGL_base_object {
-
+ protected:
     std::list<DPoint>    vertices_;
     std::list<DSegment>  edges_;
     std::list<DFacet>    halffacets_;
@@ -343,12 +358,25 @@ namespace OGL {
     Bbox_3  bbox() const { return bbox_; }
     Bbox_3& bbox()       { return bbox_; }
 
+    virtual CGAL::Color getVertexColor(bool mark) const
+    {
+	CGAL::Color cf(CGAL_NEF3_MARKED_VERTEX_COLOR),
+	  ct(CGAL_NEF3_UNMARKED_VERTEX_COLOR); // more blue-ish
+	CGAL::Color c = mark ? ct : cf;
+	return c;
+    }
+
+    virtual float getVertexSize() const
+    {
+        return 10;
+    }
+
     void draw(Vertex_iterator v) const {
       //      CGAL_NEF_TRACEN("drawing vertex "<<*v);
-      CGAL::Color cf(CGAL_NEF3_MARKED_VERTEX_COLOR),
-	ct(CGAL_NEF3_UNMARKED_VERTEX_COLOR); // more blue-ish
-      CGAL::Color c = v->mark() ? ct : cf;
-      glPointSize(10);
+      float p = getVertexSize();
+      if(p==0) return;
+      CGAL::Color c = getVertexColor(v->mark());
+      glPointSize(p);
       glColor3ub(c.red(), c.green(), c.blue());
       glBegin(GL_POINTS);
       glVertex3f(v->x(),v->y(),v->z());
@@ -359,13 +387,26 @@ namespace OGL {
       glEnd();
     }
 
+    virtual CGAL::Color getEdgeColor(bool mark) const
+    {
+	CGAL::Color cf(CGAL_NEF3_MARKED_EDGE_COLOR),
+	  ct(CGAL_NEF3_UNMARKED_EDGE_COLOR); // more blue-ish
+	CGAL::Color c = mark ? ct : cf;
+	return c;
+    }
+
+    virtual float getEdgeSize() const
+    {
+        return 5;
+    }
+
     void draw(Edge_iterator e) const {
       //      CGAL_NEF_TRACEN("drawing edge "<<*e);
+      float w = getEdgeSize();
+      if(w==0) return;
       float_point p = e->source(), q = e->target();
-      CGAL::Color cf(CGAL_NEF3_MARKED_EDGE_COLOR),
-	ct(CGAL_NEF3_UNMARKED_EDGE_COLOR); // more blue-ish
-      CGAL::Color c = e->mark() ? ct : cf;
-      glLineWidth(5);
+      CGAL::Color c = getEdgeColor(e->mark());
+      glLineWidth(w);
       glColor3ub(c.red(),c.green(),c.blue());
       glBegin(GL_LINE_STRIP);
       glVertex3f(p.x(), p.y(), p.z());
@@ -373,11 +414,21 @@ namespace OGL {
       glEnd();
     }
 
+    virtual CGAL::Color getFacetColor(bool mark) const
+    {
+	CGAL::Color cf(CGAL_NEF3_MARKED_FACET_COLOR),
+	  ct(CGAL_NEF3_UNMARKED_FACET_COLOR); // more blue-ish
+	CGAL::Color c = (mark ? ct : cf);
+	return c;
+    }
+
     void draw(Halffacet_iterator f) const {
       //      CGAL_NEF_TRACEN("drawing facet "<<(f->debug(),""));
       GLUtesselator* tess_ = gluNewTess();
       gluTessCallback(tess_, GLenum(GLU_TESS_VERTEX_DATA),
 		      (GLvoid (CGAL_GLU_TESS_CALLBACK *)(CGAL_GLU_TESS_DOTS)) &vertexCallback);
+      gluTessCallback(tess_, GLenum(GLU_TESS_COMBINE),
+		      (GLvoid (CGAL_GLU_TESS_CALLBACK *)(CGAL_GLU_TESS_DOTS)) &combineCallback);
       gluTessCallback(tess_, GLenum(GLU_TESS_BEGIN),
 		      (GLvoid (CGAL_GLU_TESS_CALLBACK *)(CGAL_GLU_TESS_DOTS)) &beginCallback);
       gluTessCallback(tess_, GLenum(GLU_TESS_END),
@@ -388,9 +439,7 @@ namespace OGL {
 		      GLU_TESS_WINDING_POSITIVE);
 
       DFacet::Coord_const_iterator cit;
-      CGAL::Color cf(CGAL_NEF3_MARKED_FACET_COLOR),
-	ct(CGAL_NEF3_UNMARKED_FACET_COLOR); // more blue-ish
-      CGAL::Color c = (f->mark() ? ct : cf);
+      CGAL::Color c = getFacetColor(f->mark());
       glColor3ub(c.red(),c.green(),c.blue());
       gluTessBeginPolygon(tess_,f->normal());
       //      CGAL_NEF_TRACEN(" ");
@@ -403,7 +452,11 @@ namespace OGL {
 	// put all vertices in facet cycle into contour:
 	for(cit = f->facet_cycle_begin(i);
 	    cit != f->facet_cycle_end(i); ++cit) {
-	  gluTessVertex(tess_, *cit, *cit);
+          double loc[3];
+          loc[0]=(*cit)[0];
+          loc[1]=(*cit)[1];
+          loc[2]=(*cit)[2];
+	  gluTessVertex(tess_, loc, *cit);
 	  //	  CGAL_NEF_TRACEN("    add Vertex");
 	}
         gluTessEndContour(tess_);
